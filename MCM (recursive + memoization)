<-------------------------------------------------------------------------------------------------------------------------------------------->
//Recursive Approch
<-------------------------------------------------------------------------------------------------------------------------------------------->
#include<bits/stdc++.h>
using namespace std;

int solve(int arr[],int i,int j)
{
    if(i>=j) return 0;
    int ans=INT_MAX;
    
    for(int k=i;k<j;k++)
    {
        
        int temp=solve(arr,i,k) + solve(arr,k+1,j) + arr[i-1]*arr[k]*arr[j];
        
        
        ans=min(temp,ans);
    }
    return ans;
    
}
int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n;cin>>n;
        
        int arr[n];
        
        for(int i=0;i<n;i++) cin>>arr[i];
        
        std::cout << solve(arr,1,n-1) << std::endl;
    }
}


<-------------------------------------------------------------------------------------------------------------------------------------------->
//Memoization Approch
<-------------------------------------------------------------------------------------------------------------------------------------------->

#include<bits/stdc++.h>
using namespace std;
int dp[1000][1000];
int solve(int arr[],int i,int j)
{
    if(i>=j) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    
    int ans=INT_MAX;
    
    for(int k=i;k<j;k++)
    {
        //dp[i][k]=solve(arr,i,k); will optimise more 
        //dp[k+1][j]=solve(arr,k+1,j);
        int temp=solve(arr,i,k) + solve(arr,k+1,j) + arr[i-1]*arr[k]*arr[j];
        
        
        ans=min(temp,ans);
    }
    return dp[i][j]=ans;//standard sol for memoization
}
int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n;cin>>n;
        memset(dp,-1,sizeof(dp));
        int arr[n];
        
        for(int i=0;i<n;i++) cin>>arr[i];
        
        std::cout << solve(arr,1,n-1) << std::endl;
    }
}
