<--------------------------------------------------------------------------------------------------------------------------------------------->
Memoization may cause more time if constraint is bigger , so the top-down approch is time optimal.
for memoization and top-down approch voth creates a unique dp array 
<--------------------------------------------------------------------------------------------------------------------------------------------->
#include<bits/stdc++.h>
using namespace std;
int dp[5000][5000];
int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n,sum=0;
        cin>>n;
        int a[n];
        for(int i=0;i<n;i++) cin>>a[i],sum+=a[i];
        
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<=n;i++) dp[i][0]=1;
        for(int i=1;i<=sum;i++) dp[0][i]=0;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                if(a[i-1]<=j)
                    dp[i][j]=dp[i-1][j-a[i-1]] | dp[i-1][j];
                else
                    dp[i][j]=dp[i-1][j];
                
            }
        }
        int minn=INT_MAX;
        for(int i=0;i<=(sum+1)/2;i++)
        {
            if(dp[n][i]==1)
            {
               if(sum-2*i >= 0)
               minn=min(minn, sum-2*i);
            }
        }
        cout<<minn<<endl;
    }
}
