<--------------------------------------------------------------------------------------------------------------------------------------------->
//Recursion Approch
<--------------------------------------------------------------------------------------------------------------------------------------------->
#include<bits/stdc++.h>
using namespace std;
int LCS(string x,string y,int n,int m)
{
    if(n==0 || m==0) return 0;
    
    if(x[n-1]==y[m-1])
    return 1+LCS(x,y,n-1,m-1);
    else return max( LCS(x,y,n-1,m) , LCS(x,y,n,m-1) );
}
int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n,m;cin>>n>>m;
        string x,y;
        cin>>x>>y;
        cout<<LCS(x,y,n,m)<<endl;
    }
}
<--------------------------------------------------------------------------------------------------------------------------------------------->
//Memoization Approch
<--------------------------------------------------------------------------------------------------------------------------------------------->
#include<bits/stdc++.h>
using namespace std;
int dp[102][102];

int LCS(string x,string y,int n,int m)
{
    if(n==0 || m==0) return 0;
    
    if(dp[n][m]!=-1) return dp[n][m];
    if(x[n-1]==y[m-1])
    {
        dp[n][m]=1+LCS(x,y,n-1,m-1);
        return dp[n][m];
    }
    else 
    {
        dp[n][m]=max(LCS(x,y,n-1,m),LCS(x,y,n,m-1));
        return dp[n][m];
    }
}
int main()
{
    int t;cin>>t;
    while(t--)
    {
        memset(dp,-1,sizeof(dp));
        int n,m;cin>>n>>m;
        string x,y;
        cin>>x>>y;
        cout<<LCS(x,y,n,m)<<endl;
    }
}
<--------------------------------------------------------------------------------------------------------------------------------------------->
//Top-down Approch
<--------------------------------------------------------------------------------------------------------------------------------------------->
#include<bits/stdc++.h>
using namespace std;
int dp[102][102];
int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n,m;cin>>n>>m;
        string x,y;cin>>x>>y;
        memset(dp,-1,sizeof(dp));
        
        for(int i=0;i<=m;i++) dp[0][i]=0;
        for(int i=0;i<=n;i++) dp[i][0]=0;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(x[i-1]==y[j-1])
                dp[i][j]=1+dp[i-1][j-1];
                else
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        std::cout << dp[n][m] << std::endl;
    }
}
