<------------------------------------------------------------------------------------------------------------------------------------------>

// Recursive solution
#include<bits/stdc++.h>
using namespace std;
#define endl "\n"
//int cnt=0;
int  ss(int n,int sum,int a[])
{
    if(n==0 || sum==0)
    {
        if(sum==0) 
        {
            //cnt++;
            return 1;
        }
        return 0;
    }
    if(a[n-1]<=sum)
    {
        return ss(n-1,sum-a[n-1],a) | ss(n-1,sum,a);
    }
    else
    return ss(n-1,sum,a);
}
int main()
{
    int n;cin>>n;
    int a[n];
    
    for(int i=0;i<n;i++) cin>>a[i];
    int sum;cin>>sum;
    
    
    if(ss(n,sum,a))
    cout<<"YES\n";
    else
    cout<<"NO\n";
    //cout<<cnt;
}

<------------------------------------------------------------------------------------------------------------------------------------------>
//With Memoisation 

#include<bits/stdc++.h>
using namespace std;
#define endl "\n"
int dp[100][1000];

int  ss(int n,int sum,int a[])
{
    if(n==0 || sum==0)
    {
        if(sum==0) 
        {
            //cnt++;
            return 1;
        }
        return 0;
    }
    if(dp[n][sum]!=-1)
    return dp[n][sum];
    if(a[n-1]<=sum)
    {
        dp[n][sum]=ss(n-1,sum-a[n-1],a) | ss(n-1,sum,a);
        return dp[n][sum];
    }
    else
    {
        dp[n][sum]= ss(n-1,sum,a);
        return dp[n][sum];
    }
}
int main()
{
    int n;cin>>n;
    int a[n];
    
    for(int i=0;i<n;i++) cin>>a[i];
    int sum;cin>>sum;
    
    memset(dp,-1,sizeof(dp));
    
    if(ss(n,sum,a))
    cout<<"Present\n";
    else
    cout<<"Absent\n";
    
    
}
<------------------------------------------------------------------------------------------------------------------------------------------>
//With top-down
#include<bits/stdc++.h>
using namespace std;
#define endl "\n"
int dp[1000][1000];


int main()
{
    int n;cin>>n;
    int a[n];
    
    for(int i=0;i<n;i++) cin>>a[i];
    int sum;cin>>sum;
    
    memset(dp,-1,sizeof(dp));
    for(int i=0;i<sum+1;i++) dp[0][i]=0;
    for(int i=0;i<n+1;i++)  dp[i][0]=1;
    
    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<sum+1;j++)
        {
            if(a[i-1]<=j)
            {
                dp[i][j]=dp[i-1][j-a[i-1]] | dp[i-1][j];
            }
            else
             dp[i][j]=dp[i-1][j];
        }
    }
    
    if(dp[n][sum])
    cout<<"present\n";
    else
    cout<<"absent\n";
    
    
}
